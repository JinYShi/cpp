//----------------------------------------Graph constructor----------------------------
//Copy constructor for the graph
template <typename N, typename E> 
Graph<N,E>::Graph(const Graph &graph) { //copy construtor
    const auto& nodeList = graph.nodeList;
    //copy the value of each node
    for(auto n: nodeList) {
        bool result = addNode(n->val);
        if(!result) throw std::runtime_error("Error in copy constructor");
    }
    //foe each node, copy the edge list
    for(auto n: nodeList) {
        //get the edge list of each node
        const auto& edgeList = (*n).edges;
        //for each edge, take the value and create a new edge
        for(auto e: edgeList) {
            //by using lock to change to share pointer so that can own it
            auto to = (*e).to.lock();
            bool result = addEdge(n->val,to->val,e->weight);
            if(!result) throw std::runtime_error("Error in copy constructor");
        }
    }    
}

//move constructor
template <typename N, typename E> 
Graph<N,E>::Graph(Graph &&graph) {
    this->nodeList = std::move(graph.nodeList); 
}

//copy assignment
template <typename N, typename E> 
Graph<N,E>& Graph<N,E>::operator=(const Graph &g) {
    if(this == &g) return *this;
    //if this is not same as g, clear this first then copy all, same as copy constructor
    this->clear();
    const auto& nodeList = g.nodeList;
    for(auto n: nodeList) {
        bool result = addNode(n->val);
        if(!result) throw std::runtime_error("Error in copy constructor");
    }
    for(auto n: nodeList) {
        const auto& edgeList = (*n).edges;
        for(auto e: edgeList) {
            const auto& to = (*e).to.lock();
            bool result = addEdge(n->val,to->val,(*e).weight);
            if(!result) throw std::runtime_error("Error in copy constructor");
        }
    }
    return *this;
}

//move assignmnet
template <typename N, typename E>
Graph<N,E>& Graph<N,E>::operator=(Graph &&graph) {
    if(this == &graph) return *this;
    this->nodeList = std::move(graph.nodeList);
    return *this;
}
//-----------------------------------create the graph-------------------------------------
//Add node into the vector nodeList
template <typename N, typename E>
bool Graph<N,E>::addNode(const N& val) {
    //check if the node is exists in vector
    for(auto n: this->nodeList) {
        if(n->val == val) return false;
    }
    //then create a new node and push it into the nodeList vector
    nodeList.push_back(std::make_shared<Node>(Node{val}));
    return true;        
}

//add edge into the edgelist
template <typename N, typename E>
bool Graph<N,E>::addEdge(const N& src, const N& dst, const E& w){
    //check if the from and to are in the graph already
    if(!isNode(src) || !isNode(dst)) throw std::runtime_error("the node does not exist");

    //get the iterator of the node by using helper fuction
    auto from = getNode(src);
    auto to = getNode(dst);
    
    // get the edgelist from node
    auto& edgeList = (*from)->edges;

    //lambda function to help find the edge which have the same destination value and weight
    auto getEdge = std::find_if(edgeList.begin(),edgeList.end(),[&dst, &w](const auto& e) {
        if(!e->to.expired()) {
            auto to = e->to.lock();
            if(to->val == dst && e->weight==w) {
                return true;
            }
        }
        return false;
    });
    //if the edge does not exist
    if(getEdge == edgeList.end()) {
        //create a share pointer as the edge and push into the edge vector
        edgeList.push_back(std::make_shared<Edge>(Edge{(*from),(*to),w}));
        return true;
    }
    return false;
    
}

//replace 
template <typename N, typename E>
bool Graph<N,E>::replace(const N& oldData, const N& newData) {
    if(isNode(oldData) == false) throw std::runtime_error("old data not exists");
    if(isNode(newData) == true) return false;
    //find out the node and get its reference
    auto oldDt = getNode(oldData);
    (*oldDt)->val = newData;
    return true;
}

//mergeReplacement
template <typename N, typename E>
void Graph<N,E>::mergeReplace(const N& oldData, const N& newData) {

    //check if both nodes exists
    if(isNode(oldData) == false || isNode(newData) == false) throw std::runtime_error("not found the node");
    if(oldData == newData) return;

    //get all the node and edge list that we need
    auto oldDt = getNode(oldData);
    auto newDt = getNode(newData);
    auto& oldEdgeList = (*oldDt)->edges;
    auto& newEdgeList = (*newDt)->edges;

    //check the old node edge list, if there a edge has same destination and weight as the new node edge
    //then remove that edge, after this loop all the duplicate edge will be removed
    for(auto newE: newEdgeList) {
        auto to = newE->to.lock();
        auto& weight = (*newE).weight;
        oldEdgeList.erase(std::remove_if(oldEdgeList.begin(),oldEdgeList.end(),[&to,&weight](const auto& e) {
            auto to = (*e).to.lock();
            return (to->val == to->val && e->weight == weight);
        }),oldEdgeList.end());
    }
    
    
    //change old from point to new data as their from
    for(auto oldE: oldEdgeList) {
        oldE->from = *newDt;

    }
    //go through the whole nodelist to change all incoming edge point to new data
    for(auto& n: nodeList) {
        auto& edgeList = (*n).edges;
        for(auto& ed: edgeList) {
            if(!ed->to.expired()) {
                auto to = (*ed).to;
                if(to.lock()->val == oldData) {
                    ed->to = *newDt;
                }
            }
        }

    }   
    //copy the old edge into the new data edge
    for(auto oldE: oldEdgeList) {
        newEdgeList.push_back(std::make_shared<Edge>(Edge{(*oldE).from.lock(),(*oldE).to.lock(),(*oldE).weight}));
    }
    //remove the old data with its edge list
    nodeList.erase(oldDt);
    return;

}

//delete node
template <typename N, typename E>
void Graph<N,E>::deleteNode(const N& node) noexcept {
    if(isNode(node) == false) return;
    //find out the node that we need to delete
    auto delNode = getNode(node);
    //go through all the nodes in the list and check their edgelist, if there is a edge has detination as
    //the node that have to delete, then we can erase that edge
    for(auto& n: nodeList) {
        auto& edgeList = (*n).edges;
        if((*n).val != (*delNode)->val) {
            edgeList.erase(std::remove_if(edgeList.begin(),edgeList.end(),[&node](const auto& e) {
                if(!e->to.expired()) {
                    return (e->to.lock()->val == node);
                }
                return false;
            }),edgeList.end());
        }        
    }
    //after we remove all the relative edge then remove the node
    nodeList.erase(delNode);
}

template <typename N, typename E>
void Graph<N,E>::deleteEdge(const N& src, const N& dst, const E& w) noexcept {
    if(isNode(src) == false || isNode(dst) == false) return;
    auto from = getNode(src);
    auto& edgeList = (*from)->edges;

    edgeList.erase(std::remove_if(edgeList.begin(),edgeList.end(),[&dst, &w](const auto& e) {
        if(!e->to.expired()) {
            return (e->to.lock()->val == dst && e->weight==w);
        }
        return false;
    }),edgeList.end());
}

//check if the node is in the edge list
template <typename N, typename E>
bool Graph<N,E>::isNode(const N& val) const {
    for(auto n: nodeList) {
        if(n->val == val) return true;
    }    
    return false;
}

//check if the edge is connected
template <typename N, typename E>
bool Graph<N,E>::isConnected(const N& src, const N& dst) const {
    if(isNode(src) == false || isNode(dst) == false) throw std::runtime_error("the node does not exist");
    //get the node and edge list that we need
    auto from = getNode(src);
    auto& edgeList = (*from)->edges;
    
    //find if there a edge in the list thsta has the same destination
    auto getEdge = std::find_if(edgeList.begin(),edgeList.end(),[&dst](const auto& e) {
        if(!e->to.expired()) {
            auto to = e->to.lock();
            if(to->val == dst) {
                return true;
            }
        }
        return false;
    });

    //if no edge exists
    if(getEdge == edgeList.end()) return false;
    return true;

}

//clear 
template <typename N, typename E>
void Graph<N,E>::clear() noexcept {
    nodeList.clear();
}

//print out the node
template <typename N, typename E>
void Graph<N,E>::printNodes() const {
    //create a temp list and sort it without change the original list
    std::vector<std::shared_ptr<Node>> temp = nodeList;
    //use lambda function sort the vector of temp node list
    std::sort(temp.begin(),temp.end(),[](const auto& a, const auto& b) {
        //if they have same number of edges then compare the value of the node
        if(a->edges.size() == b->edges.size()){
            return a->val < b->val;
        }
        //return the less number edge node first
        return a->edges.size() < b->edges.size();
    });
    //print them out
    for(const auto& n: temp){
        std::cout<<n->val<<std::endl;
    }
}

//print out the edge list
template <typename N, typename E>
void Graph<N,E>::printEdges(const N& val) const {
    //check if the node exists or not
    if(!isNode(val)) throw std::runtime_error("not exist");

    //get the target node and its edge list
    const auto& from = getNode(val);
    const auto& edgeList = (*from)->edges;

    //create a temp list to do the sort
    std::vector<std::shared_ptr<Edge>> temp = edgeList;
    std::cout << "Edges attached to Node " << (*from)->val << std::endl;

    //check if the list is empty
    if(edgeList.size() == 0) {
        std::cout << "(null)" << std::endl;
    }else{
        //otherwise, sort the edge list by their weight
        std::sort(temp.begin(),temp.end(),[](auto a, auto b) {
            return (a->weight < b->weight);
        });
        //after sorting, print them out
        for(const auto& ed: temp) {
            if(!ed->to.expired()){
                auto t = ed->to.lock();
                std::cout << t->val <<' '<<ed->weight<<std::endl;
            }
        }
    }  
}

//--------------fake iterator function------------------------

template <typename N, typename E>
void Graph<N,E>::begin() const {
    graphIt = nodeList.begin();
}

template <typename N, typename E>
bool Graph<N,E>::end() const {
    if(graphIt == nodeList.end()) return true;
    return false;
}

template <typename N, typename E>
void Graph<N,E>::next() const {
    graphIt++;
}

template <typename N, typename E>
const N& Graph<N,E>::value() const {
    return (*graphIt)->val;
}

//--------------------------------------help function-----------------------
// find out the node and return the iterator
template <typename N, typename E>
auto Graph<N, E>::getNode(const N& val) const -> decltype(nodeList.begin()) {
    auto node = std::find_if(nodeList.begin(),nodeList.end(),
    [&val] (const auto& nd){
        if(val == nd->val) return true;
        return false;
    });
    return node;
}
